reddit:
  check_interval: 30  # seconds between checks
  max_posts_per_check: 10

youtube:
  enabled: true  # Enable YouTube video processing
  summary_template: |
    # üé• {title}
    
    **Resumen del video:**
    {summary}
    
    ---
    
    *[Link al video]({url})*

    ^(CanillitaBot v1.1 - Resumiendo videos para hacerlos m√°s accesibles.)

x_twitter:
  enabled: true  # Enable X/Twitter post processing
  comment_template: |
    # üê¶ {author} en X
    
    **{date}**
    
    {text}
    
    {media_note}
    
    ---
    
    *[Ver post original]({url})*

    ^(CanillitaBot v1.1 - Compartiendo contenido de X para hacerlo m√°s accesible.)

bot:
  comment_template: |    
    # {title}
    
    {content}
    
    ---
    
    *[Link a la noticia]({url})*

    ^(CanillitaBot v1.1 - Compartiendo noticias para hacerlas m√°s accesibles.)

  continuation_template: |
    {content}
  
  max_comment_length: 10000  # Reddit's comment limit
  max_article_length: 50000  # Maximum total article length to process
  min_article_length: 200     # characters

extraction:
  timeout: 15  # seconds
  max_retries: 3
  user_agent: "CanillitaBot/1.0 (News Bot)"

database:
  path: "data/processed_posts.db"
  cleanup_days: 30  # remove entries older than this

queue:
  enabled: true  # Enable Redis-based queue processing
  redis_url: "redis://localhost:6379/0"  # Redis connection URL
  worker_timeout: 300  # Worker job timeout in seconds
  retry_delays: [300, 900, 2700]  # Retry delays in seconds (5min, 15min, 45min)
  max_retries: 3  # Maximum number of retries for failed jobs

logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: "logs/canillitabot.log"
  structured: true  # Enable JSON structured logging
  error_tracking: true  # Enable error tracking and metrics